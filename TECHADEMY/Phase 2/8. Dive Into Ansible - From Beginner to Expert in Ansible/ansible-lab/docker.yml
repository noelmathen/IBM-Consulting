---
- name: Install and Configure Docker Engine
  hosts: webservers
  connection: local
  become: yes

  tasks:
    - name: Install prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker apt repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present

    - name: Install Docker Engine
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Python Docker SDK
      apt:
        name: python3-docker
        state: present

    - name: Ensure your user can access the Docker socket
      user:
        name: "{{ lookup('env','USER') }}"
        groups: docker
        append: yes

- name: Pull and Run Containers
  hosts: webservers
  connection: local
  become: yes
  vars:
    nginx_container_name: my-nginx
    nginx_image: nginx:latest
    demo_container_name: web-demo
    demo_image: noelmathen/web-demo:2.0

  tasks:
    - name: Pull Nginx image
      community.docker.docker_image:
        name: "{{ nginx_image }}"
        source: pull

    - name: Run Nginx container
      community.docker.docker_container:
        name: "{{ nginx_container_name }}"
        image: "{{ nginx_image }}"
        state: started
        restart_policy: always
        ports:
          - "8080:80"

    - name: Pull your demo image
      community.docker.docker_image:
        name: "{{ demo_image }}"
        source: pull

    - name: Run demo container
      community.docker.docker_container:
        name: "{{ demo_container_name }}"
        image: "{{ demo_image }}"
        state: started
        restart_policy: always
        ports:
          - "8081:80"

